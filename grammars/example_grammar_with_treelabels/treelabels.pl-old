:-op(1110,xfx,where).
:-op(900,xfx,labels_fs).


%portray_tree_label(lexicon,_SubWs,RootFS,_SubTrees,DupsIn,DupsOut,NumIn,NumOut,[34|LabelString]) :-
%  !,'$label'(LabelString,[34],DupsIn,DupsOut,NumIn,NumOut) labels_fs RootFS.

%portray_tree_label(lexicon,_,_,_,_,_,_,_,_) :- !,fail. % let TRALE handle lexical items
%portray_tree_label(empty,_,_,_,_,_,_,_,_) :- !,fail. % let TRALE handle empty categories


portray_tree_label(RuleName,SubWs,RootFS,_SubTrees,DupsIn,DupsOut,NumIn,NumOut,[34|LabelString0]) :-
   write_to_codes([RuleName|SubWs],LabelString0,LabelString),
  '$label'(LabelString,[34],DupsIn,DupsOut,NumIn,NumOut) labels_fs RootFS.

/*
portray_tree_label(RuleName,SubWs,RootFS,_SubTrees,DupsIn,DupsOut,NumIn,NumOut,[34|LabelString0]) :-
  write_to_codes([RuleName],LabelString0,LabelString),
  '$label'(LabelString,[34],DupsIn,DupsOut,NumIn,NumOut) labels_fs RootFS.  
*/
% ----------------------




% Note: string variables on the RHS of 'where' can only be used *once*
% on the LHS of labels_fs, i.e., not:
% 'see('+L+','+L+')' labels_fs synsem:loc:cat:index:Ind where (L labels_fs Ind).
%
% but you can do this:
% 'see('+L1+','+L2+')' labels_fs synsem:loc:cat:index:Ind where (L1 labels_fs Ind),
%   (L2 labels_fs Ind).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%
%% Adjectives				                     
%%

% likely

'  A    '+Sem+'('+(@A1)+','+Deg+')' labels_fs (word,
                                    synsem:loc:(cat:(head:a,
				                 comps:ne_list),
				            cont:(Sem,
				                  likely_rel,
				                  arg1:A1,degree:Deg))) where true.
				            
% 2-place				            

'  A    '+Sem+'('+(@A1)+','+(@A2)+','+Deg+')' labels_fs (word,synsem:loc:cont:(Sem,arg1:A1,arg2:A2,degree:Deg),
                         synsem:loc:cat:(head:a,
				         comps:ne_list)) where true.  
				         
% 1-place				         
				         
'  A    '+Sem+'('+(@A1)+','+Deg+')' labels_fs (word,synsem:loc:cont:(Sem,arg1:A1,degree:Deg),
                         synsem:loc:cat:(head:a)) where true. 
                         
%%
%% AP				                     
%%        

'  AP' labels_fs (phrase,
                                                               synsem:loc:(cat:head:a,
                                                                           cont:likely_rel)) where true. 

'  AP    '+Sem+'('+(@A1)+','+(@A2)+','+Deg+')' labels_fs (phrase,
                                                               synsem:loc:(cat:head:a,
                                                                           cont:(Sem,arg1:A1,arg2:A2,degree:Deg))) where true.                               
                              
'  AP    '+Sem+'('+(@A1)+','+Deg+')' labels_fs (phrase,synsem:loc:cont:(Sem,arg1:A1,degree:Deg),
                                                     synsem:loc:cat:(head:a)) where true.                                                                                  
                                               

%%
%% Adverbs				                     
%%

'  Adv:'+Deg labels_fs (word,synsem:loc:(cat:head:adv,
                                               cont:Deg)) where true.      
                                               
%%
%% Complementizers				                     
%%                                               
                                               
'  C' labels_fs (word,synsem:loc:cat:head:c) where true. 


%%
%% Determiners				                     
%%

'  D' labels_fs (word,synsem:loc:(cat:head:d)) where true.  
 

%%%
%%% N and NP	
%%%

% Expletives

'  NP[it]' labels_fs (word,
                      synsem:loc:cat:(head:(n,
                                            form:it))) where true. 
                                            
'  NP[there]' labels_fs (word,
                      synsem:loc:cat:(head:(n,
                                            form:there))) where true.                                            

% NPs: names, pronouns, Det+N                                            
                                            
'  NP[nom]:'+Index+'('+(@Index)+')' labels_fs (synsem:loc:(cat:(head:(n,
                                                                      case:nom),
                                                                spr:e_list),
                                                           cont:Index)) where true. 
                                        
'  NP[acc]:'+Index+'('+(@Index)+')' labels_fs (synsem:loc:(cat:(head:(n,
                                                                      case:acc),
                                                                spr:e_list),
                                                          cont:Index)) where true. 
                                        
'  NP[case]:'+Index+'('+(@Index)+')' labels_fs (synsem:loc:(cat:(head:n,
                                                                 spr:e_list),
                                                            cont:Index)) where true.                                         
% Common nouns
                                                            
'  NP[nom]:'+Index+'('+(@Index)+')' labels_fs (synsem:loc:(cat:(head:(n,
                                                                      case:nom),
                                                                 spr:ne_list),
                                                            cont:Index)) where true.
                                                            
'  NP[acc]:'+Index+'('+(@Index)+')' labels_fs (synsem:loc:(cat:(head:(n,
                                                                      case:acc),
                                                                spr:ne_list),
                                                           cont:Index)) where true.                                                            
                                                            
'  NP[case]:'+Index+'('+(@Index)+')' labels_fs (synsem:loc:(cat:(head:n,
                                                                 spr:ne_list),
                                                            cont:Index)) where true. 	

                                                       
                                                      
%%
%% Prepositions and PPs				                     
%%
                                               
'  P['+Form+']' labels_fs cat:(head:(p,
                                      form:Form),
                                comps:ne_list) where true.
                              
'  PP['+Form+']:'+Index+'('+(@Index)+')' labels_fs (cat:(head:(p,
                                                                form:Form),
                                                          comps:e_list),
                                                     cont:Index) where true.
                      
                                                            
%%%                                                                                                             
%%% Sentence
%%%				             
				             
'  S' labels_fs hd_subj_ph where true.   

                                              
%%%
%%% Verbs, AUX, and VPs
%%%
                                                       
% 3-place; have to be ordered before 2-place

% non-finite
'  V['+VForm+']     '+(@Sem)+' = '+Sem+'('+(@A1)+','+(@A2)+','+(@A3)+')' labels_fs (word,
                                                                        synsem:loc:(cat:(head:(v,
					                                   vform:(VForm,nonfin)),
				                                     comps:ne_list),	
			                                cont:(Sem,arg1:A1,arg2:A2,arg3:A3))) where true.
			                                
% past ; has to be ordered before present rule				                                
'  V[fin]    '+'past('+Sem+'('+(@A1)+','+(@A2)+','+(@A3)+'))' labels_fs (word,
                                                                        synsem:loc:(cat:(head:(v,
					                                                       vform:fin),
				       	                                                       comps:ne_list),
                                                                                    cont:(past,
                                                                                          arg1:(Sem,arg1:A1,arg2:A2,arg3:A3)))) where true.   

% present; has to be ordered after past rule
'  V[fin]    '+Sem+'('+(@A1)+','+(@A2)+','+(@A3)+')' labels_fs (word,
                                                                        synsem:loc:(cat:(head:(v,
					                                                       vform:fin),
				       	                                                       comps:ne_list),
                                                                                    cont:(Sem,arg1:A1,arg2:A2,arg3:A3))) where true.   

                                                                                     
% 2-place; have to be ordered after 3-place

% non-finite
'  V['+VForm+']     '+(@Sem)+' = '+Sem+'('+(@A1)+','+(@A2)+')' labels_fs (word,
                                                                        synsem:loc:(cat:(head:(v,
					                                   vform:(VForm,nonfin)),
				                                     comps:ne_list),	
			                                cont:(Sem,arg1:A1,arg2:A2))) where true.
			                                
% past ; has to be ordered before present rule				                                
'  V[fin]    '+'past('+Sem+'('+(@A1)+','+(@A2)+'))' labels_fs (word,
                                                                        synsem:loc:(cat:(head:(v,
					                                                       vform:fin),
				       	                                                       comps:ne_list),
                                                                                    cont:(past,
                                                                                          arg1:(Sem,arg1:A1,arg2:A2)))) where true.   

% present; has to be ordered after past rule
'  V[fin]    '+Sem+'('+(@A1)+','+(@A2)+')' labels_fs (word,
                                                                        synsem:loc:(cat:(head:(v,
					                                                       vform:fin),
				       	                                                       comps:ne_list),
                                                                                    cont:(Sem,arg1:A1,arg2:A2))) where true.   


 % 1-place

% rain

% non-finite
'  VP['+VForm+']    '+(@Sem)+' = '+ 'rain_rel' labels_fs (word,
                                                          synsem:loc:(cat:(head:(v,
                                                                                 vform:(VForm,nonfin)),
                                                                           comps:e_list),
                                                                      cont:(Sem,rain_rel))) where true.
% present
'  VP[fin]    rain_rel' labels_fs (word,
                                         synsem:loc:(cat:(head:(v,
                                                                vform:fin),
                                                          comps:e_list),
                                                     cont:rain_rel)) where true.
% past
'  VP[fin]    '+'past(rain_rel)' labels_fs (word,
                                                  synsem:loc:(cat:(head:(v,
                                                                         vform:fin),
                                                                   comps:e_list),
                                                              cont:(past,
                                                                    arg1:rain_rel))) where true.                                                     
                                                     
% 1-place main verbs

% non-finite
'  VP['+VForm+']    '+(@Sem)+' = '+Sem+'('+(@A1)+')' labels_fs (word,
                                                    synsem:loc:(cat:(head:(v,
					                                   vform:(VForm,nonfin)),
				                                     comps:e_list),	
			                                cont:(Sem,arg1:A1))) where true.
			                                
% past ; has to be ordered before present rule				                                
'  VP[fin]    '+'past('+Sem+'('+(@A1)+'))' labels_fs (word,
                                                      synsem:loc:(cat:(head:(v,
					                                     vform:fin),
				                                       comps:e_list),
				                                  cont:(past,
				                                        arg1:(Sem,arg1:A1)))) where true.	
				                                        
% present; has to be ordered after past rule
'  VP[fin]    '+Sem+'('+(@A1)+')' labels_fs (word,
                                                    synsem:loc:(cat:(head:(v,
                                                                           vform:fin),
				                                     comps:e_list),
				                                cont:(Sem,arg1:A1))) where true.                                                                                   
                                                                       
% Auxiliaries      

% BE - progressive

% was, were - progressive
'  V[fin]    '+'past(in-prog('+(@A1)+'))' labels_fs (word,
                                    synsem:loc:(cat:(head:(v,
					                   vform:fin),
				                     comps:ne_list),
				                cont:(past,
				                      arg1:(in_prog_rel,
				                            arg1:A1)))) where true.	  

% am, is, are - progressive
'  V[fin]    '+'in-prog('+(@A1)+')' labels_fs (word,
                                    synsem:loc:(cat:(head:(v,
					                   vform:fin),
				                     comps:ne_list),
				                cont:(in_prog_rel,
				                            arg1:A1))) where true.				                            
				                            
% be, been - progressive
'  V['+VForm+']    '+(@Sem)+' = '+'in-prog'+'('+(@A1)+')' labels_fs (word,
                                                                     synsem:loc:(cat:(head:(v,
					                                                    vform:(VForm,nonfin)),
				                                                      comps:ne_list),
				                                                 cont:(Sem,
				                                                       in_prog_rel,
				                                                       arg1:A1))) where true.					

% BE - copula	

% past tense				                            
'  V[fin]    '+'past('+(@A1)+')' labels_fs (word,
                                                  synsem:loc:(cat:(head:(v,
					                           vform:fin),
				                     comps:ne_list),
				                cont:(past,
                                                      arg1:A1))) where true.  				                                                       
				                                                       
				                                                       
% HAVE - perfect

% pres have, has
'  V['+VForm+']    '+'completed('+(@A1)+')' labels_fs (word,
                                                  synsem:loc:(cat:(head:(v,
					                                 vform:(VForm,fin)),
				                                   comps:ne_list),
				                              cont:(completed_rel,
				                                    arg1:A1))) where true.				                            
% had
'  V[fin]    '+'past(completed('+(@A1)+'))' labels_fs (word,
                                    synsem:loc:(cat:(head:(v,
					                   vform:fin),
				                     comps:ne_list),
				                cont:(past,
				                      arg1:(completed_rel,
				                            arg1:A1)))) where true.
				                            
% have
'  V[base]    '+(@Sem)+' = '+'completed'+'('+(@A1)+')' labels_fs (word,
                                                  synsem:loc:(cat:(head:(v,
					                           vform:base),
				                     comps:ne_list),
				                cont:(Sem,
				                      completed_rel,
				                            arg1:A1))) where true.	     
                                                                                                                                                            
% WILL

'  V['+VForm+']    '+'future('+(@A1)+')' labels_fs (word,
                                                  synsem:loc:(cat:(head:(v,
					                           vform:(VForm,fin)),
				                     comps:ne_list),
				                cont:(future,
				                            arg1:A1))) where true. 
 
% DO, DOES + present tense forms of the copula

 '  V[fin]'   labels_fs (word,
                              synsem:loc:cat:(head:(v,
                                                    vform:fin),
				              comps:ne_list)) where true.                                                                            
                                                                                                                                                                              

                                                                                            
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


LocString labels_fs synsem:loc:Loc where LocString labels_fs Loc.



% otherwise, fail - TRALE will generate the default label

% ---------------------------------

('$label'(String,Rest,DupsIn,DupsOut,NumIn,NumOut) labels_fs FS) :- 
  select_label(FS,StringTemplate),
  !, instantiate_string(StringTemplate,String,Rest,DupsIn,DupsOut,NumIn,NumOut).

select_label(FS,StringTemplate) :-
  (StringTemplate labels_fs Desc where Body),
  term_variables(Desc,NVs), % occurrences of this in StringTemplate will be bound by bind_nvs/1 below.
  narrow_vars(Cond,NVs,((FS=Desc);(Trigger1=Trigger2))),
  ale(when(Cond,prolog(HookNVs,((Trigger1==Trigger2) -> fail ; bind_nvs(HookNVs),call(Body))))),
  Trigger1 = Trigger2,  % if Body has executed by this time, there was no delay, and there will be no failure.
  !.

instantiate_string('$label'(String,Rest,DupsIn,DupsOut,NumIn,NumOut),String,Rest,DupsIn,DupsOut,NumIn,NumOut) :- !.
instantiate_string(T1+T2,String1,Rest,DupsIn,DupsOut,NumIn,NumOut) :-
  !,instantiate_string(T1,String1,String2,DupsIn,DupsMid,NumIn,NumMid),
  instantiate_string(T2,String2,Rest,DupsMid,DupsOut,NumMid,NumOut).
instantiate_string((a_ X),XString,Rest,Dups,Dups,Num,Num) :-
  !,write_to_codes(X,XString,Rest).
instantiate_string(FS,String,Rest,Dups,Dups,Num,Num) :-
  get_type(FS,bot,Type),
  !,write_to_codes(Type,String,Rest).
instantiate_string(@FS,String,Rest,DupsIn,DupsOut,NumIn,NumOut) :-
  !, get_type(FS,bot,_),  % this really is a feature structure
  when(nonvar(DupsIn),(avl_store_once(FS,DupsIn,Num,DupsOut,NumIn),
                       write_to_codes(Num,String,Rest))),
  when((nonvar(NumIn),nonvar(DupsOut)),( Num == NumIn -> NumOut is NumIn + 1 ; NumOut = NumIn)).
instantiate_string(Literal,LitString,Rest,Dups,Dups,Num,Num) :-
  atom(Literal),
  !,format_to_chars(Literal,[],LitString,Rest).
instantiate_string(Literal,LitString,Rest,Dups,Dups,Num,Num) :-
  write_to_codes(Literal,LitString,Rest).

avl_store_once(FS,AssocIn,Val,AssocOut,InitVal) :-
  avl_fetch(FS,AssocIn,V) -> Val = V, AssocOut = AssocIn
  ; Val = InitVal, avl_store(FS,AssocIn,Val,AssocOut).

bind_nvs(NVs) :-  % labels_fs clauses are their own scope, so all NVs were fresh
  avl_to_list(NVs,NVsList),
  bind_nvs_act(NVsList).
bind_nvs_act([]).
bind_nvs_act([NV-SeenFlag|NVs]) :-
  ( SeenFlag = seen(NV) -> bind_nvs_act(NVs)
  ; % SeenFlag == unseen,
    bind_nvs_act(NVs)
  ).
    


